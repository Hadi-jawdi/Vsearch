"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/answer";
exports.ids = ["pages/api/answer"];
exports.modules = {

/***/ "@cerebras/cerebras_cloud_sdk":
/*!***********************************************!*\
  !*** external "@cerebras/cerebras_cloud_sdk" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = import("@cerebras/cerebras_cloud_sdk");;

/***/ }),

/***/ "(api)/./pages/api/answer.ts":
/*!*****************************!*\
  !*** ./pages/api/answer.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _cerebras_cerebras_cloud_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cerebras/cerebras_cloud_sdk */ \"@cerebras/cerebras_cloud_sdk\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_cerebras_cerebras_cloud_sdk__WEBPACK_IMPORTED_MODULE_0__]);\n_cerebras_cerebras_cloud_sdk__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Cerebras API key\nconst CEREBRAS_API_KEY = \"csk-5f9ftpvvtker983wvkkcym8eem65tey64khtptwhxfmenp9w\";\n// Initialize Cerebras SDK\nconst cerebras = new _cerebras_cerebras_cloud_sdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: CEREBRAS_API_KEY\n});\n// Maximum number of retries for API calls\nconst MAX_RETRIES = 3;\n// Enhanced system prompt for better responses\nconst SYSTEM_PROMPT = `You are an advanced AI assistant that provides accurate, helpful, and concise answers based on the given sources.\r\nFollow these guidelines:\r\n1. Cite sources as [1], [2], etc. after each sentence that uses information from that source\r\n2. Be objective and factual\r\n3. If the sources don't contain relevant information, acknowledge the limitations\r\n4. Synthesize information from multiple sources when appropriate\r\n5. Use bullet points for lists and structured information\r\n6. Format your response in a clear, readable way`;\n/**\r\n * Retry function for API calls with exponential backoff\r\n */ async function retryWithBackoff(fn, retries = MAX_RETRIES, delay = 1000) {\n    try {\n        return await fn();\n    } catch (error) {\n        if (retries <= 0) throw error;\n        // Wait with exponential backoff\n        await new Promise((resolve)=>setTimeout(resolve, delay));\n        // Retry with increased delay\n        return retryWithBackoff(fn, retries - 1, delay * 2);\n    }\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { prompt , previousMessages =[]  } = req.body;\n        // Validate input\n        if (!prompt || typeof prompt !== \"string\") {\n            return res.status(400).json({\n                error: \"Invalid prompt provided\"\n            });\n        }\n        // Format messages for Cerebras API\n        const formattedMessages = [\n            {\n                role: \"system\",\n                content: SYSTEM_PROMPT\n            },\n            ...previousMessages.map((msg)=>({\n                    role: msg.role,\n                    content: msg.content\n                })),\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ];\n        try {\n            // Create a completion using the Cerebras SDK with retry mechanism\n            const completion = await retryWithBackoff(async ()=>{\n                return await cerebras.chat.completions.create({\n                    messages: formattedMessages,\n                    model: \"llama-4-scout-17b-16e-instruct\",\n                    stream: false,\n                    max_completion_tokens: 2048,\n                    temperature: 0.2,\n                    top_p: 1\n                });\n            });\n            // Get the response content\n            const content = completion.choices[0]?.message?.content || \"\";\n            if (!content) {\n                throw new Error(\"No content returned from the API\");\n            }\n            // Return the response as JSON with metadata\n            res.status(200).json({\n                content,\n                metadata: {\n                    model: \"llama-4-scout-17b-16e-instruct\",\n                    timestamp: new Date().toISOString(),\n                    promptTokens: prompt.length / 4,\n                    completionTokens: content.length / 4\n                }\n            });\n        } catch (error) {\n            console.error(\"Error processing request:\", error);\n            // Provide user-friendly error messages\n            let errorMessage = \"We're having trouble generating a response. Please try again.\";\n            if (error.message.includes(\"rate limit\")) {\n                errorMessage = \"We've reached our API rate limit. Please try again in a moment.\";\n            } else if (error.message.includes(\"timeout\")) {\n                errorMessage = \"The request timed out. Please try a simpler query or try again later.\";\n            } else if (error.message.includes(\"auth\")) {\n                errorMessage = \"There's an authentication issue with our AI service. Please try again later.\";\n            }\n            res.status(500).json({\n                error: errorMessage,\n                details:  true ? error.message : 0\n            });\n        }\n    } catch (error) {\n        console.error(\"API error:\", error);\n        res.status(500).json({\n            error: \"Something went wrong with your request. Please try again.\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/answer.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/answer.ts"));
module.exports = __webpack_exports__;

})();