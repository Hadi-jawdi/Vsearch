"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/sources";
exports.ids = ["pages/api/sources"];
exports.modules = {

/***/ "@mozilla/readability":
/*!***************************************!*\
  !*** external "@mozilla/readability" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@mozilla/readability");

/***/ }),

/***/ "jsdom":
/*!************************!*\
  !*** external "jsdom" ***!
  \************************/
/***/ ((module) => {

module.exports = require("jsdom");

/***/ }),

/***/ "cheerio":
/*!**************************!*\
  !*** external "cheerio" ***!
  \**************************/
/***/ ((module) => {

module.exports = import("cheerio");;

/***/ }),

/***/ "(api)/./pages/api/sources.ts":
/*!******************************!*\
  !*** ./pages/api/sources.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _mozilla_readability__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mozilla/readability */ \"@mozilla/readability\");\n/* harmony import */ var _mozilla_readability__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_mozilla_readability__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"cheerio\");\n/* harmony import */ var jsdom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsdom */ \"jsdom\");\n/* harmony import */ var jsdom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsdom__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([cheerio__WEBPACK_IMPORTED_MODULE_1__]);\ncheerio__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Timeout for fetch requests (15 seconds)\nconst FETCH_TIMEOUT = 15000;\n// User agent rotation for requests\nconst USER_AGENTS = [\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0\",\n    \"Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/96.0.4664.53 Mobile/15E148 Safari/604.1\"\n];\n// Get a random user agent\nconst getRandomUserAgent = ()=>USER_AGENTS[Math.floor(Math.random() * USER_AGENTS.length)];\n// Maximum number of retries for fetch requests\nconst MAX_RETRIES = 3;\n// Delay between retries (in ms)\nconst RETRY_DELAY = 1000;\n// Number of sources to return\nconst DEFAULT_SOURCE_COUNT = 4;\n// List of domains to exclude from results\nconst EXCLUDED_DOMAINS = [\n    \"google\",\n    \"facebook\",\n    \"twitter\",\n    \"instagram\",\n    \"youtube\",\n    \"tiktok\",\n    \"bing\",\n    \"duckduckgo\",\n    \"pinterest\",\n    \"linkedin\",\n    \"reddit\",\n    \"quora\"\n];\n/**\n * Enhanced fetch with timeout, retries, and exponential backoff\n */ async function fetchWithTimeout(url, options = {}, timeout = FETCH_TIMEOUT) {\n    let lastError = null;\n    // Try multiple times with exponential backoff\n    for(let attempt = 0; attempt < MAX_RETRIES; attempt++){\n        const controller = new AbortController();\n        const timeoutMs = timeout * (attempt + 1); // Increase timeout with each retry\n        const id = setTimeout(()=>controller.abort(), timeoutMs);\n        // Add default headers including a random user agent\n        const headers = {\n            \"User-Agent\": getRandomUserAgent(),\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n            \"Accept-Language\": \"en-US,en;q=0.5\",\n            \"Connection\": \"keep-alive\",\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"Cache-Control\": \"no-cache\",\n            \"Pragma\": \"no-cache\",\n            ...options.headers\n        };\n        try {\n            // Add a small delay between retries with exponential backoff\n            if (attempt > 0) {\n                await new Promise((resolve)=>setTimeout(resolve, RETRY_DELAY * Math.pow(2, attempt - 1)));\n                console.log(`Retry attempt ${attempt + 1} for ${url}`);\n            }\n            const response = await fetch(url, {\n                ...options,\n                headers,\n                signal: controller.signal,\n                redirect: \"follow\"\n            });\n            clearTimeout(id);\n            // Check if we got a successful response\n            if (response.ok) {\n                return response;\n            } else {\n                // For certain status codes, we might want to retry\n                if (response.status === 429 || response.status >= 500) {\n                    lastError = new Error(`HTTP error ${response.status}: ${response.statusText}`);\n                    continue; // Retry\n                }\n                return response; // Return the response even if it's not ok\n            }\n        } catch (error) {\n            clearTimeout(id);\n            lastError = error;\n            // Don't retry if it's a CORS error or if the request was aborted\n            if (error.name === \"AbortError\" || error.message.includes(\"CORS\")) {\n                throw error;\n            }\n        // Continue to next retry attempt\n        }\n    }\n    // If we've exhausted all retries, throw the last error\n    throw lastError || new Error(`Failed to fetch ${url} after ${MAX_RETRIES} attempts`);\n}\n/**\n * Main handler for the sources API\n */ const searchHandler = async (req, res)=>{\n    // Only allow POST requests\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            sources: [],\n            error: \"Method not allowed\"\n        });\n    }\n    const startTime = Date.now();\n    try {\n        const { query , searchEngine =\"google\" , sourceCount =DEFAULT_SOURCE_COUNT  } = req.body;\n        // Validate input\n        if (!query || typeof query !== \"string\") {\n            return res.status(400).json({\n                sources: [],\n                error: \"Invalid query provided\"\n            });\n        }\n        // Limit source count to reasonable values\n        const limitedSourceCount = Math.min(Math.max(1, sourceCount), 8);\n        let allLinks = [];\n        let usedEngines = [];\n        // Get links from selected search engine(s)\n        if (searchEngine === \"all\") {\n            // Fetch from all search engines in parallel\n            console.log(`Fetching from all search engines for query: \"${query}\"`);\n            const [googleLinks, bingLinks, duckduckgoLinks] = await Promise.all([\n                getGoogleLinks(query).catch((err)=>{\n                    console.error(\"Error fetching Google links:\", err);\n                    return [];\n                }),\n                getBingLinks(query).catch((err)=>{\n                    console.error(\"Error fetching Bing links:\", err);\n                    return [];\n                }),\n                getDuckDuckGoLinks(query).catch((err)=>{\n                    console.error(\"Error fetching DuckDuckGo links:\", err);\n                    return [];\n                })\n            ]);\n            console.log(`Found links - Google: ${googleLinks.length}, Bing: ${bingLinks.length}, DuckDuckGo: ${duckduckgoLinks.length}`);\n            if (googleLinks.length > 0) usedEngines.push(\"google\");\n            if (bingLinks.length > 0) usedEngines.push(\"bing\");\n            if (duckduckgoLinks.length > 0) usedEngines.push(\"duckduckgo\");\n            allLinks = [\n                ...googleLinks,\n                ...bingLinks,\n                ...duckduckgoLinks\n            ];\n        } else {\n            // Fetch from a single search engine\n            console.log(`Fetching from ${searchEngine} for query: \"${query}\"`);\n            try {\n                switch(searchEngine){\n                    case \"google\":\n                        allLinks = await getGoogleLinks(query);\n                        usedEngines.push(\"google\");\n                        break;\n                    case \"bing\":\n                        allLinks = await getBingLinks(query);\n                        usedEngines.push(\"bing\");\n                        break;\n                    case \"duckduckgo\":\n                        allLinks = await getDuckDuckGoLinks(query);\n                        usedEngines.push(\"duckduckgo\");\n                        break;\n                    default:\n                        allLinks = await getGoogleLinks(query);\n                        usedEngines.push(\"google\");\n                }\n                console.log(`Found ${allLinks.length} links from ${searchEngine}`);\n            } catch (error) {\n                console.error(`Error fetching links from ${searchEngine}:`, error);\n                // Try Google as fallback if another engine fails\n                if (searchEngine !== \"google\") {\n                    console.log(\"Trying Google as fallback\");\n                    try {\n                        allLinks = await getGoogleLinks(query);\n                        usedEngines = [\n                            \"google (fallback)\"\n                        ];\n                    } catch (fallbackError) {\n                        console.error(\"Fallback to Google also failed:\", fallbackError);\n                    }\n                }\n            }\n        }\n        // Filter and deduplicate links\n        const filteredLinks = filterAndDeduplicateLinks(allLinks);\n        // Limit to requested number of sources\n        const finalLinks = filteredLinks.slice(0, limitedSourceCount);\n        if (finalLinks.length === 0) {\n            return res.status(200).json({\n                sources: [],\n                metadata: {\n                    engine: usedEngines.join(\"+\"),\n                    totalResults: 0,\n                    searchTime: Date.now() - startTime,\n                    filteredSources: 0\n                }\n            });\n        }\n        // Scrape text from links with timeout and concurrency control\n        const sources = await scrapeSourcesWithTimeout(finalLinks);\n        // Process and clean up sources\n        const processedSources = processSources(sources);\n        // If we still don't have any valid sources after processing, create a fallback source\n        if (processedSources.length === 0) {\n            // Create a fallback source with search information\n            const fallbackSource = {\n                url: `https://www.google.com/search?q=${encodeURIComponent(query)}`,\n                title: `Search results for: ${query}`,\n                text: `We couldn't extract detailed information from the search results for \"${query}\".\n        This could be due to various reasons such as website restrictions or content formatting.\n\n        You can try:\n        1. Rephrasing your query to be more specific\n        2. Using a different search engine (try Bing or DuckDuckGo)\n        3. Searching for a related but different topic\n\n        The search was performed using ${usedEngines.join(\"+\")} and found ${allLinks.length} potential sources.`\n            };\n            // Return the fallback source\n            res.status(200).json({\n                sources: [\n                    fallbackSource\n                ],\n                metadata: {\n                    engine: usedEngines.join(\"+\"),\n                    totalResults: allLinks.length,\n                    searchTime: Date.now() - startTime,\n                    filteredSources: 1,\n                    fallback: true\n                }\n            });\n        } else {\n            // Return the processed sources\n            res.status(200).json({\n                sources: processedSources,\n                metadata: {\n                    engine: usedEngines.join(\"+\"),\n                    totalResults: allLinks.length,\n                    searchTime: Date.now() - startTime,\n                    filteredSources: processedSources.length\n                }\n            });\n        }\n    } catch (err) {\n        console.error(\"Error in sources API:\", err);\n        res.status(500).json({\n            sources: [],\n            error: \"Failed to fetch sources. Please try again.\"\n        });\n    }\n};\n/**\n * Filter and deduplicate links\n */ function filterAndDeduplicateLinks(links) {\n    // First, filter out invalid URLs and excluded domains\n    const validLinks = links.filter((link)=>{\n        try {\n            const url = new URL(link);\n            const domain = url.hostname;\n            // Check if domain is in exclude list\n            return !EXCLUDED_DOMAINS.some((excluded)=>domain.includes(excluded));\n        } catch  {\n            return false;\n        }\n    });\n    // Then, deduplicate by domain\n    const uniqueDomains = new Set();\n    return validLinks.filter((link)=>{\n        try {\n            const domain = new URL(link).hostname;\n            if (uniqueDomains.has(domain)) return false;\n            uniqueDomains.add(domain);\n            return true;\n        } catch  {\n            return false;\n        }\n    });\n}\n/**\n * Process and clean up sources\n */ function processSources(sources) {\n    const filteredSources = sources.filter((source)=>source !== undefined && source.text && source.text.length > 100);\n    // Truncate long texts and add metadata\n    return filteredSources.map((source)=>({\n            ...source,\n            text: source.text.slice(0, 1500),\n            title: extractTitle(source.url)\n        }));\n}\n/**\n * Extract a readable title from URL\n */ function extractTitle(url) {\n    try {\n        const { hostname , pathname  } = new URL(url);\n        // Get domain without www\n        const domain = hostname.replace(/^www\\./, \"\");\n        // Get last path segment without extension\n        const pathSegment = pathname.split(\"/\").filter(Boolean).pop() || \"\";\n        const cleanPathSegment = pathSegment.replace(/\\.\\w+$/, \"\").replace(/-|_/g, \" \");\n        if (cleanPathSegment) {\n            return `${cleanPathSegment.charAt(0).toUpperCase() + cleanPathSegment.slice(1)} - ${domain}`;\n        }\n        return domain;\n    } catch  {\n        return url;\n    }\n}\n/**\n * Scrape sources with timeout\n */ /**\n * Advanced web scraping with multiple extraction techniques and smart content detection\n */ async function scrapeSourcesWithTimeout(links) {\n    // Use a more controlled approach with concurrency limit and prioritization\n    const MAX_CONCURRENT = 4;\n    const results = [];\n    // Prioritize links based on domain reputation and URL structure\n    const prioritizedLinks = prioritizeLinks([\n        ...links\n    ]);\n    const pendingLinks = prioritizedLinks;\n    console.log(`Scraping ${pendingLinks.length} links with priority order`);\n    // Process links in batches to control concurrency\n    while(pendingLinks.length > 0){\n        const batch = pendingLinks.splice(0, MAX_CONCURRENT);\n        console.log(`Processing batch of ${batch.length} links`);\n        const batchResults = await Promise.all(batch.map(async (link)=>{\n            try {\n                // Try multiple extraction techniques\n                for(let technique = 0; technique < 3; technique++){\n                    try {\n                        console.log(`Fetching ${link} with technique ${technique + 1}`);\n                        // Adjust timeout based on technique\n                        const techniqueTimeout = FETCH_TIMEOUT + technique * 5000;\n                        // Use different fetch options based on technique\n                        const fetchOptions = {\n                            headers: {\n                                // Add referer for some techniques\n                                ...technique > 0 ? {\n                                    \"Referer\": \"https://www.google.com/\"\n                                } : {}\n                            }\n                        };\n                        const response = await fetchWithTimeout(link, fetchOptions, techniqueTimeout);\n                        if (!response.ok) {\n                            console.warn(`Failed to fetch ${link}: ${response.status}, technique ${technique + 1}`);\n                            // For certain status codes, we might want to skip to next technique\n                            if (response.status === 403 || response.status === 429) {\n                                continue;\n                            }\n                            // For other status codes, we might want to try a different approach\n                            if (technique < 2) {\n                                continue;\n                            } else {\n                                break; // Give up on this link after all techniques fail\n                            }\n                        }\n                        // Get content type to handle different types of content\n                        const contentType = response.headers.get(\"content-type\") || \"\";\n                        // Skip non-HTML content\n                        if (!contentType.includes(\"text/html\") && !contentType.includes(\"application/xhtml+xml\") && !contentType.includes(\"text/plain\")) {\n                            console.warn(`Skipping non-HTML content: ${contentType} for ${link}`);\n                            continue;\n                        }\n                        const html = await response.text();\n                        // Skip if we got a very small response (likely an error page)\n                        if (html.length < 800) {\n                            console.warn(`Too small response from ${link}: ${html.length} chars`);\n                            continue;\n                        }\n                        // Check for common error patterns in the HTML\n                        if (html.includes(\"captcha\") || html.includes(\"CAPTCHA\") || html.includes(\"access denied\") || html.includes(\"Access Denied\") || html.includes(\"403 Forbidden\")) {\n                            console.warn(`Detected access restriction in ${link}`);\n                            continue;\n                        }\n                        // Parse the HTML with different methods based on technique\n                        let extractedContent = null;\n                        // Technique 1: Use Readability\n                        if (technique === 0) {\n                            extractedContent = await extractWithReadability(html, link);\n                        }\n                        // Technique 2: Use custom content extraction\n                        if (technique === 1 || !extractedContent) {\n                            extractedContent = await extractWithCustomSelectors(html, link);\n                        }\n                        // Technique 3: Use simplified extraction\n                        if (technique === 2 || !extractedContent) {\n                            extractedContent = await extractWithSimplifiedMethod(html, link);\n                        }\n                        // If we successfully extracted content\n                        if (extractedContent && extractedContent.text.length > 200) {\n                            console.log(`Successfully extracted ${extractedContent.text.length} chars from ${link}`);\n                            // Clean and process the text\n                            const processedText = processExtractedText(extractedContent.text);\n                            return {\n                                url: link,\n                                text: processedText,\n                                title: extractedContent.title || extractTitle(link)\n                            };\n                        }\n                    } catch (techniqueError) {\n                        console.warn(`Technique ${technique + 1} failed for ${link}:`, techniqueError);\n                    }\n                }\n                // All techniques failed\n                console.error(`All extraction techniques failed for ${link}`);\n                return null;\n            } catch (error) {\n                console.error(`Error scraping ${link}:`, error);\n                return null;\n            }\n        }));\n        results.push(...batchResults);\n        // If we have enough good results, we can stop early\n        const validResults = results.filter(Boolean);\n        if (validResults.length >= 3) {\n            console.log(`Got ${validResults.length} good results, stopping early`);\n            break;\n        }\n    }\n    // Filter out null results and ensure we have at least some content\n    const validSources = results.filter(Boolean);\n    // Sort sources by content quality (length and readability)\n    const sortedSources = sortSourcesByQuality(validSources);\n    // If we have no valid sources, create intelligent fallback sources\n    if (sortedSources.length === 0 && links.length > 0) {\n        console.log(\"No valid sources found, creating fallback sources\");\n        return createFallbackSources(links);\n    }\n    return sortedSources;\n}\n/**\n * Prioritize links based on domain reputation and URL structure\n */ function prioritizeLinks(links) {\n    // Score each link\n    const scoredLinks = links.map((link)=>{\n        try {\n            const url = new URL(link);\n            let score = 0;\n            // Prefer certain domains\n            const hostname = url.hostname.toLowerCase();\n            // Higher score for reputable domains\n            if (hostname.includes(\".edu\") || hostname.includes(\".gov\") || hostname.includes(\"wikipedia.org\") || hostname.includes(\"github.com\") || hostname.includes(\"stackoverflow.com\") || hostname.includes(\"medium.com\")) {\n                score += 30;\n            }\n            // Prefer shorter URLs (often main pages)\n            score -= url.pathname.split(\"/\").length * 2;\n            // Prefer URLs without query parameters\n            score -= url.search.length > 0 ? 5 : 0;\n            // Avoid certain patterns\n            if (url.pathname.includes(\"login\") || url.pathname.includes(\"signup\") || url.pathname.includes(\"account\")) {\n                score -= 20;\n            }\n            return {\n                link,\n                score\n            };\n        } catch  {\n            return {\n                link,\n                score: -100\n            }; // Invalid URLs get lowest priority\n        }\n    });\n    // Sort by score (highest first)\n    scoredLinks.sort((a, b)=>b.score - a.score);\n    // Return just the links\n    return scoredLinks.map((item)=>item.link);\n}\n/**\n * Extract content using Mozilla's Readability\n */ async function extractWithReadability(html, url) {\n    try {\n        const dom = new jsdom__WEBPACK_IMPORTED_MODULE_2__.JSDOM(html, {\n            url,\n            runScripts: \"outside-only\",\n            pretendToBeVisual: true\n        });\n        const reader = new _mozilla_readability__WEBPACK_IMPORTED_MODULE_0__.Readability(dom.window.document);\n        const article = reader.parse();\n        if (article && article.textContent && article.textContent.length > 200) {\n            return {\n                text: article.textContent,\n                title: article.title || dom.window.document.title || extractTitle(url)\n            };\n        }\n        return null;\n    } catch (error) {\n        console.warn(`Readability extraction failed for ${url}:`, error);\n        return null;\n    }\n}\n/**\n * Extract content using custom selectors for different site types\n */ async function extractWithCustomSelectors(html, url) {\n    try {\n        const dom = new jsdom__WEBPACK_IMPORTED_MODULE_2__.JSDOM(html, {\n            url\n        });\n        const doc = dom.window.document;\n        // Get the hostname to apply site-specific selectors\n        const hostname = new URL(url).hostname.toLowerCase();\n        // Define selectors for different site types\n        let selectors = [];\n        // Wikipedia-specific selectors\n        if (hostname.includes(\"wikipedia.org\")) {\n            selectors = [\n                \"#mw-content-text\",\n                \".mw-parser-output\"\n            ];\n        } else if (hostname.includes(\"github.com\")) {\n            selectors = [\n                \".markdown-body\",\n                \"article.markdown-body\",\n                \".repository-content\"\n            ];\n        } else if (hostname.includes(\"stackoverflow.com\")) {\n            selectors = [\n                \".post-text\",\n                \".answer\"\n            ];\n        } else if (hostname.includes(\"news\") || hostname.includes(\"bbc\") || hostname.includes(\"cnn\") || hostname.includes(\"nytimes\")) {\n            selectors = [\n                \".article-body\",\n                \".story-body\",\n                \".article__content\",\n                '[itemprop=\"articleBody\"]'\n            ];\n        } else {\n            selectors = [\n                \"main\",\n                \"article\",\n                '[role=\"main\"]',\n                \"#content\",\n                \".content\",\n                \".post-content\",\n                \".entry-content\",\n                \".article-content\",\n                \".post-body\",\n                \".page-content\",\n                \".main-content\",\n                \".body-content\"\n            ];\n        }\n        // Try each selector\n        for (const selector of selectors){\n            const elements = doc.querySelectorAll(selector);\n            if (elements.length > 0) {\n                // Combine text from all matching elements\n                let combinedText = \"\";\n                elements.forEach((el)=>{\n                    combinedText += el.textContent + \"\\n\\n\";\n                });\n                if (combinedText.length > 200) {\n                    return {\n                        text: combinedText,\n                        title: doc.title || extractTitle(url)\n                    };\n                }\n            }\n        }\n        // If no content found with selectors, try to find the largest text block\n        const textBlocks = findLargestTextBlocks(doc);\n        if (textBlocks && textBlocks.length > 200) {\n            return {\n                text: textBlocks,\n                title: doc.title || extractTitle(url)\n            };\n        }\n        return null;\n    } catch (error) {\n        console.warn(`Custom extraction failed for ${url}:`, error);\n        return null;\n    }\n}\n/**\n * Extract content using a simplified method (fallback)\n */ async function extractWithSimplifiedMethod(html, url) {\n    try {\n        // Use cheerio for lightweight parsing\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n        // Remove script, style, nav, footer, and other non-content elements\n        $(\"script, style, nav, footer, header, aside, .sidebar, .footer, .header, .navigation, .nav, .menu, .comments, .ads, .ad\").remove();\n        // Get the title\n        const title = $(\"title\").text() || extractTitle(url);\n        // Get all paragraphs\n        const paragraphs = [];\n        $(\"p\").each((_, el)=>{\n            const text = $(el).text().trim();\n            if (text.length > 20) {\n                paragraphs.push(text);\n            }\n        });\n        // If we found paragraphs, join them\n        if (paragraphs.length > 0) {\n            return {\n                text: paragraphs.join(\"\\n\\n\"),\n                title\n            };\n        }\n        // Fallback: get all text from body\n        const bodyText = $(\"body\").text();\n        if (bodyText.length > 200) {\n            // Clean up the text\n            const cleanedText = bodyText.replace(/\\s+/g, \" \").trim().split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 20).join(\"\\n\\n\");\n            if (cleanedText.length > 200) {\n                return {\n                    text: cleanedText,\n                    title\n                };\n            }\n        }\n        return null;\n    } catch (error) {\n        console.warn(`Simplified extraction failed for ${url}:`, error);\n        return null;\n    }\n}\n/**\n * Find the largest text blocks in a document\n */ function findLargestTextBlocks(doc) {\n    // Get all elements with substantial text\n    const textElements = [];\n    // Function to recursively process elements\n    function processElement(element) {\n        // Skip certain elements\n        const tagName = element.tagName.toLowerCase();\n        if ([\n            \"script\",\n            \"style\",\n            \"nav\",\n            \"header\",\n            \"footer\"\n        ].includes(tagName)) {\n            return;\n        }\n        // Check if this element has direct text\n        const directText = Array.from(element.childNodes).filter((node)=>node.nodeType === 3) // Text nodes only\n        .map((node)=>node.textContent || \"\").join(\"\").trim();\n        // If this element has substantial direct text, add it\n        if (directText.length > 50) {\n            textElements.push({\n                element,\n                length: directText.length\n            });\n        }\n        // Process children\n        Array.from(element.children).forEach(processElement);\n    }\n    // Start processing from body\n    processElement(doc.body);\n    // Sort by text length (largest first)\n    textElements.sort((a, b)=>b.length - a.length);\n    // Take the top elements that likely contain main content\n    const mainContentElements = textElements.slice(0, 10);\n    // Extract and join their text\n    return mainContentElements.map((item)=>item.element.textContent || \"\").join(\"\\n\\n\");\n}\n/**\n * Process and clean extracted text\n */ function processExtractedText(text) {\n    // Remove excessive whitespace\n    let processed = text.replace(/\\s+/g, \" \");\n    // Split into lines and clean each line\n    processed = processed.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).join(\"\\n\");\n    // Remove duplicate paragraphs\n    const paragraphs = processed.split(\"\\n\\n\");\n    const uniqueParagraphs = Array.from(new Set(paragraphs));\n    processed = uniqueParagraphs.join(\"\\n\\n\");\n    // Limit length to avoid extremely long texts\n    if (processed.length > 8000) {\n        processed = processed.substring(0, 8000) + \"...\";\n    }\n    return processed;\n}\n/**\n * Sort sources by quality\n */ function sortSourcesByQuality(sources) {\n    return [\n        ...sources\n    ].sort((a, b)=>{\n        // Calculate quality score based on text length and other factors\n        const scoreA = calculateContentQualityScore(a);\n        const scoreB = calculateContentQualityScore(b);\n        return scoreB - scoreA;\n    });\n}\n/**\n * Calculate content quality score\n */ function calculateContentQualityScore(source) {\n    let score = 0;\n    // Length is a primary factor\n    score += Math.min(source.text.length / 100, 50);\n    // Prefer sources with titles\n    score += source.title ? 10 : 0;\n    // Prefer sources from reputable domains\n    try {\n        const hostname = new URL(source.url).hostname.toLowerCase();\n        if (hostname.includes(\".edu\") || hostname.includes(\".gov\") || hostname.includes(\"wikipedia.org\")) {\n            score += 20;\n        }\n    } catch  {\n    // Invalid URL\n    }\n    return score;\n}\n/**\n * Create fallback sources when extraction fails\n */ function createFallbackSources(links) {\n    // Create at least one fallback source\n    const fallbackSources = [];\n    // Try to create sources from the top 3 links\n    const topLinks = links.slice(0, 3);\n    for (const link of topLinks){\n        try {\n            const domain = new URL(link).hostname.replace(\"www.\", \"\");\n            fallbackSources.push({\n                url: link,\n                text: `This information is from ${domain}. The content could not be fully extracted due to website restrictions. Please visit the website directly for complete information.`,\n                title: `Information from ${domain}`\n            });\n        } catch  {\n        // Skip invalid URLs\n        }\n    }\n    // If we couldn't create any fallback sources, create a generic one\n    if (fallbackSources.length === 0 && links.length > 0) {\n        fallbackSources.push({\n            url: links[0],\n            text: `Information could not be retrieved from the sources. This might be due to website restrictions or technical limitations. Try refining your search query or visiting the websites directly.`,\n            title: `Search Results`\n        });\n    }\n    return fallbackSources;\n}\n/**\n * Advanced Google search with multiple extraction techniques and fallbacks\n */ async function getGoogleLinks(query) {\n    try {\n        console.log(`Making Google search request for: \"${query}\"`);\n        // Try multiple search variations to improve results\n        const searchVariations = [\n            // Standard search\n            `https://www.google.com/search?q=${encodeURIComponent(query)}&num=30`,\n            // Search with verbatim option to get exact matches\n            `https://www.google.com/search?q=${encodeURIComponent(query)}&num=20&tbs=li:1`,\n            // Search with recent results\n            `https://www.google.com/search?q=${encodeURIComponent(query)}&num=20&tbs=qdr:y`\n        ];\n        let allLinks = [];\n        // Try each search variation\n        for(let i = 0; i < searchVariations.length; i++){\n            if (allLinks.length >= 15) {\n                console.log(`Already found ${allLinks.length} links, skipping remaining variations`);\n                break;\n            }\n            try {\n                const searchUrl = searchVariations[i];\n                console.log(`Trying search variation ${i + 1}: ${searchUrl}`);\n                // Add additional headers to mimic a real browser\n                const response = await fetchWithTimeout(searchUrl, {\n                    headers: {\n                        \"User-Agent\": getRandomUserAgent(),\n                        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                        \"Accept-Language\": \"en-US,en;q=0.5\",\n                        \"Referer\": \"https://www.google.com/\",\n                        \"DNT\": \"1\",\n                        \"Connection\": \"keep-alive\",\n                        \"Upgrade-Insecure-Requests\": \"1\",\n                        \"Cache-Control\": \"max-age=0\",\n                        \"sec-ch-ua\": '\"Google Chrome\";v=\"105\", \"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"105\"',\n                        \"sec-ch-ua-mobile\": \"?0\",\n                        \"sec-ch-ua-platform\": '\"Windows\"'\n                    }\n                });\n                if (!response.ok) {\n                    console.warn(`Google search variation ${i + 1} failed: ${response.status}`);\n                    continue;\n                }\n                const html = await response.text();\n                // Check if we got a valid response\n                if (html.length < 1000) {\n                    console.warn(`Too small response from Google variation ${i + 1}: ${html.length} chars`);\n                    continue;\n                }\n                if (html.includes(\"unusual traffic\") || html.includes(\"CAPTCHA\") || html.includes(\"detected unusual traffic\")) {\n                    console.warn(`Google variation ${i + 1} blocked or returned a CAPTCHA`);\n                    continue;\n                }\n                // Extract links using multiple methods\n                const extractedLinks = extractGoogleLinks(html);\n                if (extractedLinks.length > 0) {\n                    console.log(`Found ${extractedLinks.length} links from Google variation ${i + 1}`);\n                    // Add new unique links\n                    extractedLinks.forEach((link)=>{\n                        if (!allLinks.includes(link)) {\n                            allLinks.push(link);\n                        }\n                    });\n                }\n            } catch (variationError) {\n                console.error(`Error with Google search variation ${i + 1}:`, variationError);\n            }\n        }\n        // Filter and clean the links\n        const filteredLinks = filterAndCleanLinks(allLinks);\n        console.log(`Found ${filteredLinks.length} unique valid links from Google`);\n        return filteredLinks;\n    } catch (error) {\n        console.error(\"Error fetching Google links:\", error);\n        return [];\n    }\n}\n/**\n * Extract links from Google search results HTML using multiple methods\n */ function extractGoogleLinks(html) {\n    const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n    let links = [];\n    // Method 1: Standard Google search results - look for redirects\n    $(\"a\").each((_, link)=>{\n        const href = $(link).attr(\"href\");\n        if (href && href.startsWith(\"/url?q=\")) {\n            try {\n                const cleanedHref = decodeURIComponent(href.replace(\"/url?q=\", \"\").split(\"&\")[0]);\n                if (isValidUrl(cleanedHref) && !links.includes(cleanedHref)) {\n                    links.push(cleanedHref);\n                }\n            } catch (e) {\n            // Skip invalid URLs\n            }\n        }\n    });\n    // Method 2: Look for result containers and extract links\n    if (links.length < 5) {\n        console.log(\"Using Google extraction method 2\");\n        // Modern Google selectors\n        $(\".g .yuRUbf > a, .g .rc > a, .g h3.r > a, .tF2Cxc > div.yuRUbf > a, .hlcw0c .yuRUbf > a\").each((_, element)=>{\n            const href = $(element).attr(\"href\");\n            if (href && href.startsWith(\"http\") && !links.includes(href)) {\n                links.push(href);\n            }\n        });\n    }\n    // Method 3: Extract from cite elements\n    if (links.length < 5) {\n        console.log(\"Using Google extraction method 3\");\n        $(\".iUh30, .tjvcx, .qzEoUe\").each((_, element)=>{\n            const parentLink = $(element).closest(\"a\").attr(\"href\");\n            if (parentLink && parentLink.startsWith(\"http\") && !links.includes(parentLink)) {\n                links.push(parentLink);\n            } else {\n                // Try to construct URL from cite text\n                const citeText = $(element).text().trim();\n                if (citeText && !citeText.includes(\"...\") && citeText.includes(\".\")) {\n                    try {\n                        let url = citeText;\n                        if (!url.startsWith(\"http\")) {\n                            url = \"https://\" + url;\n                        }\n                        if (isValidUrl(url) && !links.includes(url)) {\n                            links.push(url);\n                        }\n                    } catch (e) {\n                    // Skip invalid URLs\n                    }\n                }\n            }\n        });\n    }\n    // Method 4: Last resort - find any external links\n    if (links.length < 3) {\n        console.log(\"Using Google extraction method 4 (last resort)\");\n        $(\"a[href^='http']\").each((_, element)=>{\n            const href = $(element).attr(\"href\");\n            if (href && !href.includes(\"google.com\") && !href.includes(\"accounts.\") && !href.includes(\"support.\") && isValidUrl(href) && !links.includes(href)) {\n                links.push(href);\n            }\n        });\n    }\n    return links;\n}\n/**\n * Filter and clean a list of URLs\n */ function filterAndCleanLinks(links) {\n    // Remove duplicates\n    let uniqueLinks = Array.from(new Set(links));\n    // Filter out invalid and unwanted URLs\n    uniqueLinks = uniqueLinks.filter((link)=>{\n        try {\n            const url = new URL(link);\n            const hostname = url.hostname.toLowerCase();\n            // Filter out common non-content domains\n            const invalidDomains = [\n                \"google.com\",\n                \"youtube.com\",\n                \"facebook.com\",\n                \"twitter.com\",\n                \"instagram.com\",\n                \"linkedin.com\",\n                \"pinterest.com\",\n                \"amazon.com\",\n                \"ebay.com\",\n                \"netflix.com\",\n                \"apple.com\",\n                \"microsoft.com\",\n                \"play.google.com\",\n                \"accounts.google.com\",\n                \"support.google.com\",\n                \"maps.google.com\",\n                \"policies.google.com\",\n                \"translate.google.com\",\n                \"chrome.google.com\",\n                \"docs.google.com\",\n                \"drive.google.com\",\n                \"mail.google.com\",\n                \"calendar.google.com\"\n            ];\n            if (invalidDomains.some((domain)=>hostname.includes(domain))) {\n                return false;\n            }\n            // Filter out URLs with certain patterns\n            const invalidPatterns = [\n                \"/search?\",\n                \"/login\",\n                \"/signin\",\n                \"/signup\",\n                \"/register\",\n                \"/account\",\n                \"/cart\",\n                \"/checkout\",\n                \"/privacy\",\n                \"/terms\",\n                \"/contact\",\n                \"/about\",\n                \"/help\",\n                \"/support\",\n                \"/faq\",\n                \"/download\",\n                \"/subscribe\",\n                \"/membership\",\n                \"/pricing\"\n            ];\n            if (invalidPatterns.some((pattern)=>url.pathname.includes(pattern))) {\n                return false;\n            }\n            return true;\n        } catch  {\n            return false;\n        }\n    });\n    // Limit to a reasonable number\n    return uniqueLinks.slice(0, 20);\n}\n/**\n * Validate if a string is a valid URL and meets content criteria\n */ function isValidUrl(url) {\n    try {\n        new URL(url);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n/**\n * Enhanced Bing search with multiple extraction techniques\n */ async function getBingLinks(query) {\n    try {\n        console.log(`Making Bing search request for: \"${query}\"`);\n        // Try multiple search variations\n        const searchVariations = [\n            // Standard search\n            `https://www.bing.com/search?q=${encodeURIComponent(query)}&count=30`,\n            // Search with news\n            `https://www.bing.com/search?q=${encodeURIComponent(query)}&filters=news`,\n            // Search with freshness filter\n            `https://www.bing.com/search?q=${encodeURIComponent(query)}&filters=ex1%3a\"ez5\"`\n        ];\n        let allLinks = [];\n        // Try each search variation\n        for(let i = 0; i < searchVariations.length; i++){\n            if (allLinks.length >= 15) {\n                console.log(`Already found ${allLinks.length} links from Bing, skipping remaining variations`);\n                break;\n            }\n            try {\n                const searchUrl = searchVariations[i];\n                console.log(`Trying Bing search variation ${i + 1}: ${searchUrl}`);\n                // Add headers to mimic a real browser\n                const response = await fetchWithTimeout(searchUrl, {\n                    headers: {\n                        \"User-Agent\": getRandomUserAgent(),\n                        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                        \"Accept-Language\": \"en-US,en;q=0.5\",\n                        \"Referer\": \"https://www.bing.com/\",\n                        \"Connection\": \"keep-alive\",\n                        \"Upgrade-Insecure-Requests\": \"1\",\n                        \"Cache-Control\": \"max-age=0\"\n                    }\n                });\n                if (!response.ok) {\n                    console.warn(`Bing search variation ${i + 1} failed: ${response.status}`);\n                    continue;\n                }\n                const html = await response.text();\n                // Check if we got a valid response\n                if (html.length < 1000) {\n                    console.warn(`Too small response from Bing variation ${i + 1}: ${html.length} chars`);\n                    continue;\n                }\n                // Extract links using multiple methods\n                const extractedLinks = extractBingLinks(html);\n                if (extractedLinks.length > 0) {\n                    console.log(`Found ${extractedLinks.length} links from Bing variation ${i + 1}`);\n                    // Add new unique links\n                    extractedLinks.forEach((link)=>{\n                        if (!allLinks.includes(link)) {\n                            allLinks.push(link);\n                        }\n                    });\n                }\n            } catch (variationError) {\n                console.error(`Error with Bing search variation ${i + 1}:`, variationError);\n            }\n        }\n        // Filter and clean the links\n        const filteredLinks = filterAndCleanLinks(allLinks);\n        console.log(`Found ${filteredLinks.length} unique valid links from Bing`);\n        return filteredLinks;\n    } catch (error) {\n        console.error(\"Error fetching Bing links:\", error);\n        return [];\n    }\n}\n/**\n * Extract links from Bing search results HTML\n */ function extractBingLinks(html) {\n    const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n    let links = [];\n    // Method 1: Extract from main search results\n    $(\".b_algo h2 a\").each((_, element)=>{\n        const href = $(element).attr(\"href\");\n        if (href && href.startsWith(\"http\") && !links.includes(href)) {\n            links.push(href);\n        }\n    });\n    // Method 2: Extract from cite elements\n    $(\".b_caption cite\").each((_, element)=>{\n        const parentLink = $(element).closest(\".b_algo\").find(\"h2 a\").attr(\"href\");\n        if (parentLink && parentLink.startsWith(\"http\") && !links.includes(parentLink)) {\n            links.push(parentLink);\n        }\n    });\n    // Method 3: Extract from deep links\n    $(\".b_deeplinks a\").each((_, element)=>{\n        const href = $(element).attr(\"href\");\n        if (href && href.startsWith(\"http\") && !links.includes(href)) {\n            links.push(href);\n        }\n    });\n    // Method 4: Last resort - find any external links\n    if (links.length < 5) {\n        $(\"a[href^='http']\").each((_, element)=>{\n            const href = $(element).attr(\"href\");\n            if (href && !href.includes(\"bing.com\") && !href.includes(\"microsoft.com\") && !href.includes(\"msn.com\") && isValidUrl(href) && !links.includes(href)) {\n                links.push(href);\n            }\n        });\n    }\n    return links;\n}\n/**\n * Enhanced DuckDuckGo search with multiple extraction techniques\n */ async function getDuckDuckGoLinks(query) {\n    try {\n        console.log(`Making DuckDuckGo search request for: \"${query}\"`);\n        // Try multiple search variations\n        const searchVariations = [\n            // Standard HTML search\n            `https://html.duckduckgo.com/html/?q=${encodeURIComponent(query)}`,\n            // With region set to US\n            `https://html.duckduckgo.com/html/?q=${encodeURIComponent(query)}&kl=us-en`,\n            // With time filter for recent results\n            `https://html.duckduckgo.com/html/?q=${encodeURIComponent(query)}&df=y`\n        ];\n        let allLinks = [];\n        // Try each search variation\n        for(let i = 0; i < searchVariations.length; i++){\n            if (allLinks.length >= 15) {\n                console.log(`Already found ${allLinks.length} links from DuckDuckGo, skipping remaining variations`);\n                break;\n            }\n            try {\n                const searchUrl = searchVariations[i];\n                console.log(`Trying DuckDuckGo search variation ${i + 1}: ${searchUrl}`);\n                // Add headers to mimic a real browser\n                const response = await fetchWithTimeout(searchUrl, {\n                    headers: {\n                        \"User-Agent\": getRandomUserAgent(),\n                        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                        \"Accept-Language\": \"en-US,en;q=0.5\",\n                        \"Referer\": \"https://duckduckgo.com/\",\n                        \"Connection\": \"keep-alive\",\n                        \"Upgrade-Insecure-Requests\": \"1\",\n                        \"Cache-Control\": \"max-age=0\"\n                    }\n                });\n                if (!response.ok) {\n                    console.warn(`DuckDuckGo search variation ${i + 1} failed: ${response.status}`);\n                    continue;\n                }\n                const html = await response.text();\n                // Check if we got a valid response\n                if (html.length < 1000) {\n                    console.warn(`Too small response from DuckDuckGo variation ${i + 1}: ${html.length} chars`);\n                    continue;\n                }\n                // Extract links using our custom function\n                const extractedLinks = extractDuckDuckGoLinks(html);\n                if (extractedLinks.length > 0) {\n                    console.log(`Found ${extractedLinks.length} links from DuckDuckGo variation ${i + 1}`);\n                    // Add new unique links\n                    extractedLinks.forEach((link)=>{\n                        if (!allLinks.includes(link)) {\n                            allLinks.push(link);\n                        }\n                    });\n                }\n            } catch (variationError) {\n                console.error(`Error with DuckDuckGo search variation ${i + 1}:`, variationError);\n            }\n        }\n        // If HTML search failed, try the lite version as fallback\n        if (allLinks.length === 0) {\n            try {\n                console.log(\"Trying DuckDuckGo Lite as fallback\");\n                const liteUrl = `https://lite.duckduckgo.com/lite/?q=${encodeURIComponent(query)}`;\n                const response = await fetchWithTimeout(liteUrl, {\n                    headers: {\n                        \"User-Agent\": getRandomUserAgent(),\n                        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\"\n                    }\n                });\n                if (response.ok) {\n                    const html = await response.text();\n                    const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n                    // Extract links from the lite version\n                    $(\"a[href^='http']\").each((_, element)=>{\n                        const href = $(element).attr(\"href\");\n                        if (href && !href.includes(\"duckduckgo.com\") && isValidUrl(href) && !allLinks.includes(href)) {\n                            allLinks.push(href);\n                        }\n                    });\n                    console.log(`Found ${allLinks.length} links from DuckDuckGo Lite fallback`);\n                }\n            } catch (liteError) {\n                console.error(\"Error with DuckDuckGo Lite fallback:\", liteError);\n            }\n        }\n        // Filter and clean the links\n        const filteredLinks = filterAndCleanLinks(allLinks);\n        console.log(`Found ${filteredLinks.length} unique valid links from DuckDuckGo`);\n        return filteredLinks;\n    } catch (error) {\n        console.error(\"Error fetching DuckDuckGo links:\", error);\n        return [];\n    }\n}\n/**\n * Extract links from DuckDuckGo search results HTML\n */ function extractDuckDuckGoLinks(html) {\n    const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n    let links = [];\n    // Method 1: Extract from main result links\n    $(\".result__a\").each((_, element)=>{\n        const href = $(element).attr(\"href\");\n        if (href) {\n            try {\n                // DuckDuckGo uses relative URLs with parameters\n                const url = new URL(href, \"https://duckduckgo.com\");\n                const cleanedHref = url.searchParams.get(\"uddg\");\n                if (cleanedHref && isValidUrl(cleanedHref) && !links.includes(cleanedHref)) {\n                    links.push(cleanedHref);\n                }\n            } catch (e) {\n            // Skip invalid URLs\n            }\n        }\n    });\n    // Method 2: Extract from result snippets\n    $(\".result__snippet\").each((_, element)=>{\n        const parentLink = $(element).closest(\".result\").find(\".result__a\").attr(\"href\");\n        if (parentLink) {\n            try {\n                const url = new URL(parentLink, \"https://duckduckgo.com\");\n                const cleanedHref = url.searchParams.get(\"uddg\");\n                if (cleanedHref && isValidUrl(cleanedHref) && !links.includes(cleanedHref)) {\n                    links.push(cleanedHref);\n                }\n            } catch (e) {\n            // Skip invalid URLs\n            }\n        }\n    });\n    // Method 3: Last resort - find any external links\n    if (links.length < 3) {\n        $(\"a[href^='/']\").each((_, element)=>{\n            const href = $(element).attr(\"href\");\n            if (href && href.includes(\"uddg=\")) {\n                try {\n                    const url = new URL(href, \"https://duckduckgo.com\");\n                    const cleanedHref = url.searchParams.get(\"uddg\");\n                    if (cleanedHref && isValidUrl(cleanedHref) && !links.includes(cleanedHref)) {\n                        links.push(cleanedHref);\n                    }\n                } catch (e) {\n                // Skip invalid URLs\n                }\n            }\n        });\n    }\n    return links;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (searchHandler);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/sources.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/sources.ts"));
module.exports = __webpack_exports__;

})();